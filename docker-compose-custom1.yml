services:
  # The main OpenWebUI service
  openwebui:
    build:
      context: .
      dockerfile: Dockerfile-custom1
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      # Connect to the PostgreSQL database using environment variables
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      # Persist our data in a volume
      - openwebui-data:/usr/src/app/backend/data
    labels:
      # Traefik labels to route traffic to OpenWebUI
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui.rule=Host(`localhost`)"
      - "traefik.http.routers.openwebui.entrypoints=https-openwebui"
      - "traefik.http.routers.openwebui.tls=true"
      - "traefik.http.services.openwebui.loadbalancer.server.port=8000"

  # A helper service to run a web-based file manager
  cloudcmd:
    volumes:
      - openwebui-data:/openwebui-data
    image: coderaiser/cloudcmd
    environment:
      - CLOUDCMD_NAME=openwebui-data
      - CLOUDCMD_THEME=light
      - CLOUDCMD_CONTACT=false
      - CLOUDCMD_CONSOLE=false
      - CLOUDCMD_TERMINAL=false
      - CLOUDCMD_ONE_FILE_PANEL=false
      - CLOUDCMD_USERNAME=admin
      - CLOUDCMD_PASSWORD=${CLOUDCMD_ADMIN_PASSWORD}
      - CLOUDCMD_ROOT=/openwebui-data
      - CLOUDCMD_CONFIG_DIALOG=false
      - CLOUDCMD_AUTH=true
      - CLOUDCMD_SHOW_FILE_NAME=true
    labels:
      # Traefik labels to route traffic to CloudCmd
      - "traefik.enable=true"
      - "traefik.http.routers.cloudcmd.rule=Host(`localhost`)"
      - "traefik.http.routers.cloudcmd.entrypoints=https-cloudcmd"
      - "traefik.http.routers.cloudcmd.tls=true"
      - "traefik.http.services.cloudcmd.loadbalancer.server.port=8000"

  # PostgreSQL database service
  postgres:
    image: postgres:16
    environment:
      # Use environment variables from the .env file
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      # Persist PostgreSQL data in a volume
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin service
  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      - postgres
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      # Set the path to the server definitions file
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json
    volumes:
      # Persist pgAdmin data in a volume
      - "pgadmin-data:/var/lib/pgadmin"
      # Mount the servers.json file into the container
      - "./_docker_files_custom1/pgadmin-servers.json:/pgadmin4/servers.json"
    labels:
      # Traefik labels to route traffic to pgAdmin
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=https-pgadmin"
      - "traefik.http.routers.pgadmin.tls=true"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"

  # Traefik reverse proxy service
  traefik:
    image: traefik:v3.1.2
    command:
      # Specify the configuration file
      - "--configFile=/traefik.yml"
    ports:
      # Ensure these ports match the entrypoints in traefik-custom1.yml
      - "8443:8443"  # Expose HTTPS port for openwebui
      - "8143:8143"  # Expose HTTPS port for cloudcmd
      - "8243:8243"  # Expose HTTPS port for pgAdmin
      - "8080:8080"  # The Web UI (enabled by --api)
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Directory containing self-signed certificates
      - "./_docker_files_custom1/secrets/:/secrets/"
      # Traefik Configuration file
      - "./_docker_files_custom1/traefik-custom1.yml:/traefik.yml"
    labels:
      # Dashboard basic authentication middleware
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS}"
      # Dashboard route configuration
      - "traefik.http.routers.traefik.rule=Host(`localhost`)"
      - "traefik.http.routers.traefik.entrypoints=https-dashboard"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"

volumes:
  # Define the volume openwebui-data to persist all system data
  # This could be made an external volume to host this data on a share, etc.
  openwebui-data:
  # Define the volume postgres-data to persist database data
  postgres-data:
  # Define the volume pgadmin-data to persist pgAdmin data
  pgadmin-data:
